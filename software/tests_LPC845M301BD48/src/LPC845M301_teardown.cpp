/*
 * SPDX-License-Identifier: MIT
 *
 * Copyright (c) 2021 Bart Bilos
 * For conditions of distribution and use, see LICENSE file
 */
/**
 * @brief Teardown function that resets the LPC845 to a state
 * that more or less matches reset state
 */
#include <nuclone_LPC845M301BD48_tests.hpp>
#include <LPC845M301_teardown.hpp>
#include <test_conditions.hpp>

#define IOCON_NORMAL_DEFAULT    0x000000B0      /**< Default value for most pins */
#define IOCON_I2CPIN_MASK       (~0x00000400)   /**< some I2C pins have no default value, so mask them */
#define IOCON_I2CPIN_DEFAULT    0x000000B0      /**< I2C pins have some bits extra and lose some bits */
#define IOCON_XTAL_DEFAULT      0x00000080      /**< Crystal oscillator deviate from reset values */

void LPC845M301_teardown(void)
{

}

/** @brief resets all the registers to their default states
 *  @return if all registers are correctly torndown
 */
bool LPC845M301TeardownCorrect(void)
{
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_17] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_13] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_12] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_5] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_4] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_3] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_2] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN((IOCON->PIO[IOCON_PIO0_11] & IOCON_I2CPIN_MASK) == IOCON_I2CPIN_DEFAULT);
    TESTANDRETURN((IOCON->PIO[IOCON_PIO0_10] & IOCON_I2CPIN_MASK) == IOCON_I2CPIN_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_16] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_15] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_1] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_9] == IOCON_XTAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_8] == IOCON_XTAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_7] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_6] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_0] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_14] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_28] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_27] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_26] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_25] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_24] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_23] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_22] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_21] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_20] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_19] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_18] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_8] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_9] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_12] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_13] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_31] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_0] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_1] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_2] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_14] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_15] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_3] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_4] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_5] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_16] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_17] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_6] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_18] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_19] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_7] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_29] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO0_30] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_20] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_21] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_11] == IOCON_NORMAL_DEFAULT);
    TESTANDRETURN(IOCON->PIO[IOCON_PIO1_10] == IOCON_NORMAL_DEFAULT);
    // check SWM registers
    // check GPIO registers
    return true;
}